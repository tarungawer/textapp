{"version":3,"sources":["Components/About.js","Components/Navbar.js","Components/TextFrom.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setMyStyle","btnText","setBtnText","className","style","id","type","onClick","border","Navbar","props","mode","to","title","aboutTextApp","name","document","body","getElementById","for","toggleMode","htmlFor","TextFrom","text","setText","heading","rows","value","onChange","event","target","newText","toUpperCase","showAlert","toLowerCase","myArray","split","console","log","length","newArray","i","firstCap","charAt","slice","finalText","toString","replace","select","navigator","clipboard","writeText","join","filter","n","count","counter","defaultProps","Alert","alert","role","word","lower","capitalize","msg","App","setMode","setAlert","message","setTimeout","setInterval","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d0933fae.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\n\r\nexport default function About() {\r\n\r\n    const [myStyle, setMyStyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white'\r\n    })\r\n    \r\n    const [btnText, setBtnText] = useState(\"Enable Dark Mode\")\r\n    \r\n    const darkMode = () => {\r\n        if(myStyle.color === 'black')\r\n        {\r\n            setMyStyle({\r\n            color: 'white',\r\n            backgroundColor: 'black',\r\n            border: '1px solid white'\r\n            })\r\n            setBtnText(\"Enable Ligth Mode\")\r\n        }\r\n        else\r\n        {\r\n            setMyStyle({\r\n            color: 'black',\r\n            backgroundColor: 'white'\r\n            })\r\n            setBtnText(\"Enable Dark Mode\")\r\n        }\r\n    }\r\n    \r\n    \r\n\r\n    return (\r\n        <div className= \"container\" style={myStyle}>\r\n            <h1 className=\"my-3\">About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\" >\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={myStyle}>\r\n                        Accordion Item #1\r\n                    </button>\r\n                    </h2>\r\n            <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={myStyle}>\r\n                Accordion Item #2\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\"style={myStyle}>\r\n                Accordion Item #3\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\"style={myStyle}>\r\n                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        <div className=\"container my-3\">\r\n        <button onClick={darkMode} type=\"button\" className=\"btn btn-primary my-3\">{btnText}</button>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  const darkThemeRed = () => {\r\n    if (props.mode === 'dark')\r\n    {\r\n      document.body.style.backgroundColor = 'red';\r\n      document.getElementById('btn11').style.backgroundColor = 'orange';\r\n      document.getElementById('btn12').style.backgroundColor = 'orange';\r\n      document.getElementById('btn13').style.backgroundColor = 'orange';\r\n      document.getElementById('btn14').style.backgroundColor = 'orange';\r\n      document.getElementById('btn15').style.backgroundColor = 'orange';\r\n      document.getElementById('btn16').style.backgroundColor = 'orange';\r\n    }\r\n  }\r\n\r\n  const darkThemeOrange = () => {\r\n    if (props.mode === 'dark')\r\n    {\r\n      document.body.style.backgroundColor = 'orange';\r\n      document.getElementById('btn11').style.backgroundColor = 'green';\r\n      document.getElementById('btn12').style.backgroundColor = 'green';\r\n      document.getElementById('btn13').style.backgroundColor = 'green';\r\n      document.getElementById('btn14').style.backgroundColor = 'green';\r\n      document.getElementById('btn15').style.backgroundColor = 'green';\r\n      document.getElementById('btn16').style.backgroundColor = 'green';\r\n    }\r\n  }\r\n\r\n  const darkThemeGreen = () => {\r\n    if (props.mode === 'dark')\r\n    {\r\n      document.body.style.backgroundColor = 'green';\r\n      document.getElementById('btn11').style.backgroundColor = 'red';\r\n      document.getElementById('btn12').style.backgroundColor = 'red';\r\n      document.getElementById('btn13').style.backgroundColor = 'red';\r\n      document.getElementById('btn14').style.backgroundColor = 'red';\r\n      document.getElementById('btn15').style.backgroundColor = 'red';\r\n      document.getElementById('btn16').style.backgroundColor = 'red';\r\n    }\r\n  }\r\n\r\n\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.aboutTextApp}</Link>\r\n        </li>\r\n      </ul>\r\n\r\n\r\n      <div className=\"form-check mx-1\">\r\n                <input className=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault1\" onClick={darkThemeRed}/>\r\n                <label className={`form-check-label text-${props.mode === 'light' ? 'dark' : 'light'}`} for=\"flexRadioDefault1\">\r\n                  Red\r\n                </label>\r\n      </div>\r\n      <div className=\"form-check mx-1\">\r\n                <input className=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault2\" onClick={darkThemeGreen}/>\r\n                <label className={`form-check-label text-${props.mode === 'light' ? 'dark' : 'light'}`} for=\"flexRadioDefault2\">\r\n                  Green\r\n                </label>\r\n      </div>\r\n      <div className=\"form-check mx-1\">\r\n                <input className=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault3\" onClick={darkThemeOrange}/>\r\n                <label className={`form-check-label text-${props.mode === 'light' ? 'dark' : 'light'}`} for=\"flexRadioDefault3\">\r\n                  Orange\r\n                </label>\r\n      </div>\r\n\r\n        <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'} mx-3`}>\r\n          <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode} />\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.mode === 'dark' ? 'Disable' : 'Enable'} Dark Mode</label>\r\n        </div>\r\n    </div>\r\n  </div>\r\n  </nav>\r\n    )\r\n} \r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\naboutTextApp: PropTypes.string.isRequired,\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set Title Here',\r\n    aboutTextApp: 'Set About Here'\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextFrom(props) {\r\n        const handleUpper = ()=>{\r\n        // console.log(\"UpperCase was Clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to UpperCase!\", \"success\");\r\n        }\r\n\r\n        const handleLower = ()=>{\r\n            let newText = text.toLowerCase();\r\n            setText(newText);\r\n            props.showAlert(\"Converted to LowerCase!\", \"success\");\r\n            }\r\n\r\n        const handleClear = ()=>{\r\n            let newText = '';\r\n            setText(newText);\r\n            props.showAlert(\"Text Cleared!\", \"success\");\r\n            }\r\n    \r\n            // to capitalize the first character of any string\r\n        const capitalize = () => {\r\n            let myArray = text.split(' ');\r\n            console.log(myArray.length);\r\n            let newArray = [];\r\n            console.log(myArray);\r\n            for (let i = 0; i < myArray.length; i++) {\r\n                let firstCap = myArray[i].charAt(0).toUpperCase();\r\n                newArray[i] = firstCap + myArray[i].slice(1);\r\n                }\r\n            let firstCapText = newArray.toString();\r\n            let finalText = firstCapText.replace(/,/g, \" \");\r\n            console.log(newArray);\r\n            setText(finalText);    \r\n            props.showAlert(\"First letters capitalised!\", \"success\");\r\n\r\n            }\r\n            \r\n        const handleCopy = () => {\r\n            let text = document.getElementById(\"mybox\");\r\n            text.select();\r\n            navigator.clipboard.writeText(text.value);\r\n            props.showAlert(\"Text Copied!\", \"success\");\r\n        }\r\n\r\n        const handleExtraSpaces = () => {\r\n            let newText= text.split(/[ ]+/);\r\n            setText(newText.join(\" \"))\r\n            props.showAlert(\"Extra spaces removed!\", \"success\");\r\n        }\r\n\r\n    \r\n        const handleOnChange = (event)=>{\r\n        // console.log(\"On Change\");\r\n        setText(event.target.value);\r\n        \r\n        }\r\n\r\n        const counter = () => {\r\n        // Initialize the word counter\r\n        let count = 0;\r\n  \r\n        // Split the words on each\r\n        // space character \r\n        let split = text.split(/\\n| /);\r\n\r\n        // Loop through the words and \r\n        // increase the counter when \r\n        // each split word is not empty\r\n        for (let i = 0; i < split.length; i++) {\r\n            if (split[i] !== \"\") {\r\n                count += 1;\r\n            }\r\n            // console.log(\"hi\" + text.split(/\\n| /));\r\n        }\r\n\r\n        // Display it as output\r\n        return count;       \r\n        }\r\n\r\n        // const [wordCount, setWordCount] = useState(0)\r\n        \r\n\r\n        const [text, setText] = useState(\"\");\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode === 'dark' ? 'white' : 'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" id=\"mybox\" rows=\"10\" style={{backgroundColor: props.mode === 'dark' ? 'grey' : 'white', color: props.mode === 'dark' ? 'white' : 'black'}} value={text} onChange={handleOnChange}></textarea>\r\n            </div>\r\n            <button id=\"btn11\" className=\"btn btn-primary mx-2 my-1\" onClick={handleUpper}>Convert to Uppercase</button>\r\n            <button id=\"btn12\" className=\"btn btn-primary mx-2 my-1\" onClick={handleLower}>Convert to Lowercase</button>\r\n            <button id=\"btn13\" className=\"btn btn-primary mx-2 my-1\" onClick={handleClear}>Clear Text</button>\r\n            <button id=\"btn14\" className=\"btn btn-primary mx-2 my-1\" onClick={capitalize}>Capital First Letter</button>\r\n            <button id=\"btn15\" className=\"btn btn-primary mx-2 my-1\" onClick={handleCopy}>Copy Text</button>\r\n            <button id=\"btn16\" className=\"btn btn-primary mx-2 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n            \r\n        </div>\r\n        <div className=\"container my-3\"  style={{color: props.mode === 'dark' ? 'white' : 'black'}}>\r\n            <h2>Words and Characters in your text</h2>\r\n            <p>{text.split(/\\n| /).filter(function(n) { return n !== ''}).length} words {text.length} character</p>\r\n            {/* {text.length === 0 ? 0 : text.trim().split(/\\n| /).length} */}\r\n            {/* this also works */}\r\n            <p>{0.008 * counter()} Minutes Read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length > 0 ? text : \"Enter some text in the TextBox to preview it here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n           <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\r\nimport About from './Components/About';\r\nimport Navbar from './Components/Navbar';\r\nimport TextFrom from './Components/TextFrom';\r\nimport React, { useState } from 'react'\r\nimport Alert from './Components/Alert';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState('light')\r\n  const [alert, setAlert] = useState(null)\r\n  \r\n\r\n  const showAlert = (message, type) => {\r\n    setAlert({\r\n      msg: message,\r\n      type: type\r\n    })\r\n    setTimeout(() => {\r\n      setAlert(null)\r\n    }, 1500);\r\n  }\r\n\r\n  const toggleMode = () => {\r\n    if(mode === 'light'){\r\n      setMode('dark');\r\n      document.body.style.backgroundColor = '#27224a';\r\n      showAlert(\"Dark Mode has been enabled!\", \"success\");\r\n      document.title = 'TextApp - DarkMode';\r\n      setInterval(() => {\r\n        document.title = 'TextApp is Amazing';\r\n      }, 2000);\r\n      setInterval(() => {\r\n        document.title = 'Install TextApp Now';\r\n      }, 1500);\r\n    }\r\n    else{\r\n      setMode('light');\r\n      document.body.style.backgroundColor = '#cfd8ff';\r\n      showAlert(\"Dark Mode has been Disabled!\", \"success\");\r\n      document.getElementById('btn11').style.backgroundColor = '#0d6efd';\r\n      document.getElementById('btn12').style.backgroundColor = '#0d6efd';\r\n      document.getElementById('btn13').style.backgroundColor = '#0d6efd';\r\n      document.getElementById('btn14').style.backgroundColor = '#0d6efd';\r\n      document.getElementById('btn15').style.backgroundColor = '#0d6efd';\r\n      document.getElementById('btn16').style.backgroundColor = '#0d6efd';\r\n      document.title = 'TextApp - LightMode';\r\n    }\r\n  }\r\n  return (\r\n<>\r\n    <Router>\r\n    <Navbar title=\"TextApp\" aboutTextApp=\"About TextApp\" mode={mode} toggleMode={toggleMode}/>\r\n    <Alert alert={alert}/>\r\n    <div className=\"container my-3\">\r\n    <Switch>\r\n          <Route exact path=\"/about\">\r\n            <About />\r\n          </Route>\r\n          <Route exact path=\"/\">\r\n          <TextFrom showAlert={showAlert} heading=\"Enter Your Text\" mode={mode}/>\r\n          </Route>\r\n    </Switch>\r\n    </div>\r\n    </Router>\r\n</>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}